}
for(month in months){
factor = str_c(env.factor, "_", month)
interaction.factors = c(interaction.factors, factor)
provo[factor] = provo[env.factor]*provo[month]
}
for(season in seasons){
factor = str_c(env.factor, "_", season)
interaction.factors = c(interaction.factors, factor)
provo[factor] = provo[env.factor]*provo[season]
}
}
provo <<- provo
return(interaction.factors)
}
interaction.factors = add_interaction_factors()
model.factors = c(model.factors, interaction.factors, polynomial.factors)
provo[(max(lags)+1):nrow(provo),] -> provo_reduced
provo_reduced = truncate_provo(provo_reduced)
#Basic Linear Model (Robust)
provo.lm = lm(log_DailyNumFines ~ ., provo_reduced[c(model.factors, "log_DailyNumFines")])
summary(provo.lm)
provo.base = lm(log_DailyNumFines ~ 1, data=provo_reduced[c(model.factors, "log_DailyNumFines")])
provo.step = step(provo.base,
direction = "both",
k = log(nrow(provo)),
scope = list(lower=provo.base, upper=provo.lm))
provo.step = step(provo.base,
direction = "both",
k = log(nrow(provo_reduced)),
scope = list(lower=provo.base, upper=provo.lm))
summary(provo.step)
provo.x = as.matrix(provo_reduced[model.factors])
provo.y = as.matrix(provo_reduced["log_DailyNumFines"])
lasso_cv <- cv.glmnet(x = provo.x,
y = provo.y,
type.measure = "mse",
alpha = 1)
d = coef(lasso_cv, s = "lambda.1se")[1:length(model.factors)]
provo.lasso = lmrob(log_DailyNumFines ~ ., provo_reduced[c(model.factors[which(d != 0)-1],
"log_DailyNumFines")], fast.s.large.n = Inf)
provo.lasso = lmrob(log_DailyNumFines ~ ., provo_reduced[c(model.factors[which(d != 0)-1],
"log_DailyNumFines")], fast.s.large.n = Inf)
summary(provo.lasso)
provo.lasso = lm(log_DailyNumFines ~ ., provo_reduced[c(model.factors[which(d != 0)-1],
"log_DailyNumFines")], fast.s.large.n = Inf)
summary(provo.lasso)
hist(provo.lasso$residuals)
autoplot(provo.lasso)
autoplot
difference = 1
model.factors = setdiff(model.factors, c(str_c("DailyNumFines_Lag", lags),
str_c("DailyNumFines_Lag", lags, "_2"),
"t", env.lag.factors))
for(factor in c("log_DailyNumFines", model.factors)){
provo[str_c(factor, "_t-",difference)] = lag(provo[factor], n=difference)
provo[str_c(factor, "_change")] = provo[factor] -
provo[str_c(factor, "_t-",difference)]
}
provo.change = provo[(difference+1):nrow(provo), c("DATE",
str_c(c(model.factors, "log_DailyNumFines"), "_change"))]
provo.change = truncate_provo(provo.change)
#Full lm
provo.change.full = lm(log_DailyNumFines_change ~ 0 + ., provo.change)
provo.change.base = lm(log_DailyNumFines_change ~ 0, provo.change)
provo.change.step = step(provo.change.base,
direction = "both",
k = log(nrow(provo.change)),
scope=list(lower=provo.change.base,
upper= provo.change.full))
summary(provo.change.step)
provo.x = as.matrix(provo.change[str_c(model.factors,
"_change")])
provo.y = as.matrix(provo.change["log_DailyNumFines_change"])
lasso_cv <- cv.glmnet(x = provo.x,
y = provo.y,
type.measure = "mse",
alpha = 1)
provo.change.lasso = lmrob(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")],
fast.s.large.n = Inf)
provo.change.lasso = lmrob(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")],
fast.s.large.n = Inf)
provo.change %>% View()
provo.change %>% select(log_DailyNumFines_change)
provo.change %>% select(log_DailyNumFines_change) %>% View()
colSums(provo.change$log_DailyNumFines_change)
colSums(provo.change["log_DailyNumFines_change"])
colSums(is.na(provo.change["log_DailyNumFines_change"]))
colSums(is.na(provo.change))
complete.cases(provo.change)
provo.change[!complete.cases(provo.change),]
provo.change.lasso = lm(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")])#,
d = coef(lasso_cv, s = "lambda.1se")[1:length(model.factors)]
provo.change.lasso = lm(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")])#,
[which(d != 0)-1],
[which(d != 0)-1],
provo.change.lasso = lm(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")]),
provo.change.lasso = lm(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")],
fast.s.large.n = Inf)
provo.change.lasso = lmrob(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")],
fast.s.large.n = Inf)
summary(provo.change.lasso)
#Random Forest Model
model.factors = c("MaxTemp", "MinTemp", "MeanTemp", "RainPrecip", "SnowPrecip",
"Wind", "CO", "NO2", "O3", "PM10", "PM25", "AQI", "Mon",
"Tues", "Wed", "Thurs", "Fri", "Sun", "t", "FullTime",
"Holiday", "Exam", "February", "March", "April", "May",
"June", "July", "August", "September", "October", "November",
"December", "Spring", "Summer", "Fall", "DailyNumFines_Lag1",
"DailyNumFines_Lag7",
"DailyNumFines_Lag14", "DailyNumFines_Lag21",
"DailyNumFines_Lag28", interaction.factors, polynomial.factors)
provo.rf = randomForest(log_DailyNumFines ~ .,
data = provo_reduced[c(model.factors,
"log_DailyNumFines")])
provo_reduced$predicted = provo.rf$predicted
provo_reduced$residuals = provo_reduced$log_DailyNumFines - provo_reduced$predicted
importance(provo.rf)
sort(importance(provo.rf))
importance(provo.rf) %>% as_tibble()
coef.rf = tibble(
coef = model.factors,
weight = importance(provo.rf)
)
coef.rf %>% View()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
theme_minimal()
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.lasso, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.step, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
theme_minimal()
provo = read_csv("provo.csv")
provo = read_csv("provo.csv")
set.seed(123)
provo$t = 1:nrow(provo)
lags = c(1, 7, 14, 21, 28)
provo$log_DailyNumFines = log(provo$DailyNumFines+1)
for(lag in lags){
provo[str_c("DailyNumFines_Lag", lag)] = lag(provo$DailyNumFines, n=lag)
}
#Missing Data
end = "2019-04-23"
begin = "2017-03-08"
#COVID
covid.begin = "2020-03-14"
covid.end = "2020-09-07"
truncate_provo = function(p){
p %>% filter(!(DATE >= ymd(begin) & DATE <= ymd(end) |
DATE >= ymd(covid.begin) & DATE <= ymd(covid.end)))
}
#Add dummy variables
for(m in unique(provo$Month)){
provo[month.name[m]] = provo$Month == m
}
for(term in unique(provo$Term)){
provo[term] = provo$Term == term
}
model.factors = c("MaxTemp", "MinTemp", "MeanTemp", "RainPrecip", "SnowPrecip",
"Wind", "CO", "NO2", "O3", "PM10", "PM25", "AQI", "Mon",
"Tues", "Wed", "Thurs", "Fri", "Sun", "t", "FullTime",
"Holiday", "Exam", "February", "March", "April", "May",
"June", "July", "August", "September", "October", "November",
"December", "Spring", "Summer", "Fall", "DailyNumFines_Lag1",
"DailyNumFines_Lag7",
"DailyNumFines_Lag14", "DailyNumFines_Lag21",
"DailyNumFines_Lag28")
log.factors = c("RainPrecip", "SnowPrecip", "Wind", "NO2",
"PM10", "PM25", "AQI", "FullTime")
for(factor in log.factors){
provo[factor] = log(provo[factor]+1)
}
polynomial.factors = c("MaxTemp", "MinTemp", "MeanTemp", "RainPrecip", "SnowPrecip",
"Wind", "CO", "NO2", "O3", "PM10", "PM25", "AQI",
"t", "FullTime","DailyNumFines_Lag1",
"DailyNumFines_Lag7",
"DailyNumFines_Lag14", "DailyNumFines_Lag21",
"DailyNumFines_Lag28"
)
for(factor in polynomial.factors){
provo[str_c(factor, "_2")] = provo[factor]^2
}
polynomial.factors = str_c(polynomial.factors, "_2")
env.lag.factors = c()
add_interaction_factors = function(){
interaction.factors = c()
env.factors = c("MaxTemp", "MinTemp", "MeanTemp", "RainPrecip", "SnowPrecip",
"Wind", "CO", "NO2", "O3", "PM10", "PM25", "AQI")
days = c("Mon", "Tues", "Wed", "Thurs", "Fri", "Sun")
months = c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
seasons = c("Spring", "Summer", "Fall")
lag_factors = c("DailyNumFines_Lag1",
"DailyNumFines_Lag7",
"DailyNumFines_Lag14", "DailyNumFines_Lag21",
"DailyNumFines_Lag28")
combinations = combn(env.factors, 2)
for(i in 1:ncol(combinations)){
factor = paste(combinations[,i], collapse = "_")
interaction.factors = c(interaction.factors, factor)
provo[factor] = provo[combinations[1,i]]*provo[combinations[2,i]]
}
for(day in days){
factor = str_c(day, "_", "DailyNumFines_Lag1")
env.lag.factors <<- c(env.lag.factors, factor)
interaction.factors = c(interaction.factors, factor)
provo[factor] = provo[day]*provo["DailyNumFines_Lag1"]
}
for(env.factor in env.factors){
for(lag_factor in lag_factors){
factor = str_c(env.factor, "_", lag_factor)
env.lag.factors <<- c(env.lag.factors, factor)
interaction.factors = c(interaction.factors, factor)
provo[factor] = provo[env.factor]*provo[lag_factor]
}
for(month in months){
factor = str_c(env.factor, "_", month)
interaction.factors = c(interaction.factors, factor)
provo[factor] = provo[env.factor]*provo[month]
}
for(season in seasons){
factor = str_c(env.factor, "_", season)
interaction.factors = c(interaction.factors, factor)
provo[factor] = provo[env.factor]*provo[season]
}
}
provo <<- provo
return(interaction.factors)
}
interaction.factors = add_interaction_factors()
model.factors = c(model.factors, interaction.factors, polynomial.factors)
provo[(max(lags)+1):nrow(provo),] -> provo_reduced
provo_reduced = truncate_provo(provo_reduced)
#Basic Linear Model (Robust)
provo.lm = lm(log_DailyNumFines ~ ., provo_reduced[c(model.factors, "log_DailyNumFines")])
summary(provo.lm)
provo.base = lm(log_DailyNumFines ~ 1, data=provo_reduced[c(model.factors, "log_DailyNumFines")])
provo.step = step(provo.base,
direction = "both",
k = log(nrow(provo_reduced)),
scope = list(lower=provo.base, upper=provo.lm))
summary(provo.step)
provo.x = as.matrix(provo_reduced[model.factors])
provo.y = as.matrix(provo_reduced["log_DailyNumFines"])
lasso_cv <- cv.glmnet(x = provo.x,
y = provo.y,
type.measure = "mse",
alpha = 1)
d = coef(lasso_cv, s = "lambda.1se")[1:length(model.factors)]
provo.lasso = lmrob(log_DailyNumFines ~ ., provo_reduced[c(model.factors[which(d != 0)-1],
"log_DailyNumFines")], fast.s.large.n = Inf)
summary(provo.lasso)
provo.lasso = lm(log_DailyNumFines ~ ., provo_reduced[c(model.factors[which(d != 0)-1],
"log_DailyNumFines")], fast.s.large.n = Inf)
summary(provo.lasso)
difference = 1
model.factors = setdiff(model.factors, c(str_c("DailyNumFines_Lag", lags),
str_c("DailyNumFines_Lag", lags, "_2"),
"t", env.lag.factors))
for(factor in c("log_DailyNumFines", model.factors)){
provo[str_c(factor, "_t-",difference)] = lag(provo[factor], n=difference)
provo[str_c(factor, "_change")] = provo[factor] -
provo[str_c(factor, "_t-",difference)]
}
provo.change = provo[(difference+1):nrow(provo), c("DATE",
str_c(c(model.factors, "log_DailyNumFines"), "_change"))]
provo.change = truncate_provo(provo.change)
#Full lm
provo.change.full = lm(log_DailyNumFines_change ~ 0 + ., provo.change)
provo.change.base = lm(log_DailyNumFines_change ~ 0, provo.change)
provo.change.step = step(provo.change.base,
direction = "both",
k = log(nrow(provo.change)),
scope=list(lower=provo.change.base,
upper= provo.change.full))
summary(provo.change.step)
provo.x = as.matrix(provo.change[str_c(model.factors,
"_change")])
provo.y = as.matrix(provo.change["log_DailyNumFines_change"])
lasso_cv <- cv.glmnet(x = provo.x,
y = provo.y,
type.measure = "mse",
alpha = 1)
d = coef(lasso_cv, s = "lambda.1se")[1:length(model.factors)]
provo.change.lasso = lmrob(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")],
fast.s.large.n = Inf)
provo.change.lasso = lmrob(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")],
fast.s.large.n = Inf)
summary(provo.change.lasso)
provo.change %>% View()
provo.change$prediction = predict(provo.change.lasso, provo.change)
difference = 1
model.factors = setdiff(model.factors, c(str_c("DailyNumFines_Lag", lags),
str_c("DailyNumFines_Lag", lags, "_2"),
"t", env.lag.factors, "SnowPrecip_Summer"))
for(factor in c("log_DailyNumFines", model.factors)){
provo[str_c(factor, "_t-",difference)] = lag(provo[factor], n=difference)
provo[str_c(factor, "_change")] = provo[factor] -
provo[str_c(factor, "_t-",difference)]
}
provo.change = provo[(difference+1):nrow(provo), c("DATE",
str_c(c(model.factors, "log_DailyNumFines"), "_change"))]
provo.change = truncate_provo(provo.change)
#Full lm
provo.change.full = lm(log_DailyNumFines_change ~ 0 + ., provo.change)
provo.change.base = lm(log_DailyNumFines_change ~ 0, provo.change)
provo.change.step = step(provo.change.base,
direction = "both",
k = log(nrow(provo.change)),
scope=list(lower=provo.change.base,
upper= provo.change.full))
provo.change.step = step(provo.change.base,
direction = "both",
k = log(nrow(provo.change)),
scope=list(lower=provo.change.base,
upper= provo.change.full))
summary(provo.change.step)
provo.x = as.matrix(provo.change[str_c(model.factors,
"_change")])
provo.y = as.matrix(provo.change["log_DailyNumFines_change"])
lasso_cv <- cv.glmnet(x = provo.x,
y = provo.y,
type.measure = "mse",
alpha = 1)
d = coef(lasso_cv, s = "lambda.1se")[1:length(model.factors)]
provo.change.lasso = lmrob(log_DailyNumFines_change ~ 0 + .,
provo.change[c(str_c(model.factors, "_change")
[which(d != 0)-1],
"log_DailyNumFines_change")],
fast.s.large.n = Inf)
summary(provo.change.lasso)
provo.change$prediction = predict(provo.change.lasso, provo.change)
provo.change = provo[(difference+1):nrow(provo), c("DATE", "DailyNumFines",
str_c(c(model.factors, "log_DailyNumFines"), "_change"))]
provo.change$prediction = predict(provo.change.lasso, provo.change)
provo.change$DailyNumFinesPrediction = provo.change$prediction+provo.change$DailyNumFines
provo.change$DailyNumFinesPrediction = exp(provo.change$prediction+
lag(provo.change$DailyNumFines,
n=difference))
provo.change$prediction+
lag(provo.change$DailyNumFines,
n=difference)
provo.change$prediction+
lag(provo.change$DailyNumFines,
n=difference) %>% exp()
length(provo.change$prediction)
length(lag(provo.change$DailyNumFines,
n=difference))
exp(provo.change$prediction+
lag(provo.change$DailyNumFines,
n=difference))
provo.change$prediction %>% length()
provo.change$DailyNumFinesPrediction = exp(provo.change$prediction+
lag(provo.change$DailyNumFines,
n=difference))
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.step, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
geom_line(data=provo.change, aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.step, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
provo.change$DailyNumFinesPrediction = exp(provo.change$prediction+log(
lag(provo.change$DailyNumFines,
n=difference)))
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.step, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.step, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
provo_reduced$predicted = provo.rf$predicted
provo_reduced$residuals = provo_reduced$log_DailyNumFines - provo_reduced$predicted
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.step, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
#Random Forest Model
model.factors = c("MaxTemp", "MinTemp", "MeanTemp", "RainPrecip", "SnowPrecip",
"Wind", "CO", "NO2", "O3", "PM10", "PM25", "AQI", "Mon",
"Tues", "Wed", "Thurs", "Fri", "Sun", "t", "FullTime",
"Holiday", "Exam", "February", "March", "April", "May",
"June", "July", "August", "September", "October", "November",
"December", "Spring", "Summer", "Fall", "DailyNumFines_Lag1",
"DailyNumFines_Lag7",
"DailyNumFines_Lag14", "DailyNumFines_Lag21",
"DailyNumFines_Lag28", interaction.factors, polynomial.factors)
provo.rf = randomForest(log_DailyNumFines ~ .,
data = provo_reduced[c(model.factors,
"log_DailyNumFines")])
provo_reduced$predicted = provo.rf$predicted
provo_reduced$residuals = provo_reduced$log_DailyNumFines - provo_reduced$predicted
coef.rf = tibble(
coef = model.factors,
weight = importance(provo.rf)
)
coef.rf %>% View()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.step, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.lasso, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#CCDDFF")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FFCC")+
geom_line(aes(x=DATE, y=exp(predict(provo.lasso, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#DFA8D4")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#99FF1C")+
geom_line(aes(x=DATE, y=exp(predict(provo.lasso, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#DFA8D4")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#89E112")+
geom_line(aes(x=DATE, y=exp(predict(provo.lasso, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#DFA8D4")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
summary(provo.change.lasso)
summary(provo.lasso)
summary(provo.change.lasso)
provo.change$prediction
og(
lag(provo.change$DailyNumFines,
n=difference))
log(
lag(provo.change$DailyNumFines,
n=difference))
provo.change$DailyNumFinesPrediction = exp(provo.change$prediction+log(
lag(provo.change$DailyNumFines,
n=difference)+1))
provo_reduced %>% filter(year(DATE) == 2022) %>%
ggplot()+
geom_line(aes(x=DATE, y=DailyNumFines), color="#123943")+
geom_line(aes(x=DATE, y=exp(predict(provo.rf, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#89E112")+
geom_line(aes(x=DATE, y=exp(predict(provo.lasso, (provo_reduced %>% filter(year(DATE) == 2022))))),  color="#DFA8D4")+
geom_line(data=provo.change %>% filter(year(DATE) == 2022), aes(x=DATE, y=DailyNumFinesPrediction), color="#6F9FFF")+
theme_minimal()
